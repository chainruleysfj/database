django 使用教程：
一、初始化
1.安装
确保已安装python和pip工具，并已经添加路径到系统变量，在命令行输入
pip install django mysqlclient django-crispy-forms
安装django和mysqlclient
2.安装好后，在命令行输入
cd 文件夹路径
（如D:\database，若错误，可能需要以D:/database形式）
以切换工作文件夹为你希望建立django项目的文件夹。最好没有中文路径以避免bug
注：如果使用我在github上建立的仓库，可以跳过第 3 步。
3.
创建一个新的Django项目和应用：
在命令行依次输入：
django-admin startproject 项目名
（如movie_project）

cd movie_project 
（或你自行设置的项目名）

django-admin startapp app名
（如movies）


（下面均使用我自己用的名字介绍）
4.完成后，在D:/database中，应该出现一个名为movie_project的文件夹，
点进去，会有movie_project和movie_app两个文件夹，和manage.py文件。点进movie_project
找到settings.py,点开，找到
DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'movie_industry',
            'USER': 'root',
            'PASSWORD': 'password',  # 替换为实际密码
            'HOST': 'localhost',
            'PORT': '3306',
        }
    }
部分，将'PASSWORD'改成你自己的mysql数据库密码。如果定义数据库时用的不是我发的ddl.sql文件，
'NAME'修改为你自己的数据库名称。

现在，你成功创建了一个django项目。

二、介绍
1.模型models
在movie_app文件夹中，存在models.py文件。这个文件的作用等同于数据库里面的create table。
具体格式可以参考我的代码或问gpt。例：

class ProductionCompany(models.Model):
    company_id = models.AutoField(primary_key=True)  # 对应 CompanyID
    name = models.CharField(max_length=50, unique=True)  # 对应 Name
    city = models.CharField(max_length=50, blank=True, null=True)  # 对应 City
    company_description = models.TextField(blank=True, null=True)  # 对应 CompanyDescription

    def __str__(self):  #这个的作用不是很清楚，没查
        return self.name

一开始，models.py文件应该为空。假如你在里面定义了一个model：ProductionCompany，为了将其同步到数据库，你需要：
(1)确保命令行工作文件夹在有manage.py的那个文件夹（D:\database\movie_project）

(2)在命令行运行
python manage.py makemigrations
python manage.py migrate
如果顺利执行，则在mysql数据库中，会创建一个table:movie_app_ProductionCompany(可能还会自动创建一些django自己需要的表)
如果有报错，总之搜索一下吧。注意，如果使用我在github上建立的仓库，可能会因为已经有的迁移历史
（在\movie_app\migrations和数据库中django_migrations），而导致一些冲突？不清楚会不会发生。

(3)通过在其他py文件import models.ProductionCompany，可以使用相关功能。具体有哪些功能可以问GPT或搜索，
我也不是非常了解。使用model本质就是为了create table。其他功能会用最好，不会用应该也行。

2.视图views
在movie_app文件夹中，存在views.py文件。这个文件的作用是根据前端传来的request,处理相应的业务。
由于django自带的功能，其实有的东西可以不用sql，直接实现。但我担心可能没有体现数据库课程的内容，
所以我的代码主要用了调用procedure的方式。如果直接让gpt写代码，它很可能会使用django的自带内容，
需要提前对它说明。自己写代码的话，总之就参考一下已经有的。

views的主要格式大概就是
def example(request):
    #业务代码
    return ...
常见return有：
return render(request, 'home.html')   表示返回页面'home.html'
return redirect('list_production_companies') 表示重定向到页面'list_production_companies.html'？
（也可能是urls里设置的name?）
return render(request, 'add_production_company.html', {'form': form})  表示将返回页面'home.html'，
并向页面前端传递{'form': form}信息，这个传递的信息也可能是别的什么东西
注：
procedure的调用：
在数据库中定义好并执行，如
DROP PROCEDURE IF EXISTS add_productioncompany;
DELIMITER $$
CREATE PROCEDURE add_productioncompany(IN p_name VARCHAR(50), IN p_city VARCHAR(50), IN p_description TEXT)
BEGIN
    INSERT INTO movie_app_productioncompany (name, city, company_description)
    VALUES (p_name, p_city, p_description);
END$$
DELIMITER ;
之后在views代码中使用
with connection.cursor() as cursor:
    cursor.callproc('add_productioncompany', [name, city, description])
即可。

3.forms
GPT使用的，便于简化一些操作和修改。感觉和python里的类差不多。在movie_app文件夹中原始没有，
需要自己新建forms.py,增加form代码，然后在views代码中import ProductionCompanyForm from forms.py即可调用。
应该不用也行，但GPT很常用，所以我加上了。

4.urls
在\movie_project\movie_project内，有urls.py文件。主要作用似乎是决定前端发送的请求由哪个views接收？
需要首先加上from movie_app import views，然后在urlpatterns = []修改。如：
urlpatterns = [
   path('', views.home, name='home'),  # 添加一个根路径的视图处理器
   path('admin/', admin.site.urls),  #管理员
   path('add_movie/', views.add_movie, name='add_movie'), #添加电影
]
其中，第一个表示前端的路径。第二个表示接收request的views函数。name我不太懂是作用到哪了，应该是表示前端
html文件的名字？
注：
path('admin/', admin.site.urls),  #管理员
这里的admin.site.urls是django自带的，不用管。可以用命令行输入
python manage.py createsuperuser
创建账号，但我不清楚有什么用。

4.templates
在movie_app文件夹中，自行创建一个名为templates的文件夹，用于存储前端代码。前端我写了几个试运行的，后期还要改。

三、启动服务器
确保命令行工作文件夹位于manage.py所在文件夹
在命令行运行python manage.py runserver即可。
现在，可在http://127.0.0.1:8000/访问服务器。

注：请先定义好urls:path('', views.home, name='home')及对应views函数和home.html文件，即可在浏览器看到对应
页面。
注：如果使用我在github上建立的仓库，先在数据库执行crud_procedure.sql文件，以正常调用对应存储过程。
注：在命令行输入ctrl+c以退出服务器。

如果还有什么疏漏，遗漏了某些问题，或者某些地方有误，可以联系我修改。